# class DirectGraph:
#     """
#     Class to represent a directed graph.
#     """
#     def __init__(self, init_node_label: str):
#         if isinstance(str, tuple(init_node_label)):
#             self.__graph = {
#                 init_node_label: Node(label=init_node_label, positives_edges=[], negatives_edges=[])
#             }
#         else:
#             print("Database should be initialized with core node label. \nType : str")
#             raise TypeError
# 
# class Node:
#     """
#     Class to represent one node of a graph.
#     """
#     def __init__(self, label: str, positives_edges: list, negatives_edges: list):
#         self.__label = label
#         self.__edges = Edges(positives_edges, negatives_edges)
# 
#     @property
#     def label(self):
#         return self.__label
# 
#     @property
#     def edges(self):
#         return self.__edges
# 
#     @edges.setter
#     def edges(self, positives: list=None, negatives: list=None):
#         if positives:
#             self.__edges.positives = self.__edges.positives + positives
#         if negatives:
#             self.__edges.negatives = self.__edges.negatives + negatives
# 
# 
# class Edges:
#     def __init__(self, positives, negatives):
#         self.__positives = positives
#         self.__negatives = negatives
# 
#     @property
#     def positives(self):
#         return self.__positives
# 
#     @property
#     def negatives(self):
#         return self.__negatives
# 
#     @positives.setter
#     def positives(self, new_positives):
#         self.__positives = new_positives
# 
#     @negatives.setter
#     def negatives(self, new_negatives):
#         self.__negatives = new_negatives
